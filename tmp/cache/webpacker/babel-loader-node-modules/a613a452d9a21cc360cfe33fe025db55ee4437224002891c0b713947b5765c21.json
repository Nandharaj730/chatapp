{"ast":null,"code":"'use strict';\n\nconst BB = require('bluebird');\nconst chownr = BB.promisify(require('chownr'));\nconst mkdirp = BB.promisify(require('mkdirp'));\nconst inflight = require('promise-inflight');\nconst inferOwner = require('infer-owner');\n\n// Memoize getuid()/getgid() calls.\n// patch process.setuid/setgid to invalidate cached value on change\nconst self = {\n  uid: null,\n  gid: null\n};\nconst getSelf = () => {\n  if (typeof self.uid !== 'number') {\n    self.uid = process.getuid();\n    const setuid = process.setuid;\n    process.setuid = uid => {\n      self.uid = null;\n      process.setuid = setuid;\n      return process.setuid(uid);\n    };\n  }\n  if (typeof self.gid !== 'number') {\n    self.gid = process.getgid();\n    const setgid = process.setgid;\n    process.setgid = gid => {\n      self.gid = null;\n      process.setgid = setgid;\n      return process.setgid(gid);\n    };\n  }\n};\nmodule.exports.chownr = fixOwner;\nfunction fixOwner(cache, filepath) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return BB.resolve();\n  }\n  getSelf();\n  if (self.uid !== 0) {\n    // almost certainly can't chown anyway\n    return BB.resolve();\n  }\n  return BB.resolve(inferOwner(cache)).then(owner => {\n    const uid = owner.uid,\n      gid = owner.gid;\n\n    // No need to override if it's already what we used.\n    if (self.uid === uid && self.gid === gid) {\n      return;\n    }\n    return inflight('fixOwner: fixing ownership on ' + filepath, () => chownr(filepath, typeof uid === 'number' ? uid : self.uid, typeof gid === 'number' ? gid : self.gid).catch({\n      code: 'ENOENT'\n    }, () => null));\n  });\n}\nmodule.exports.chownr.sync = fixOwnerSync;\nfunction fixOwnerSync(cache, filepath) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return;\n  }\n  const _inferOwner$sync = inferOwner.sync(cache),\n    uid = _inferOwner$sync.uid,\n    gid = _inferOwner$sync.gid;\n  getSelf();\n  if (self.uid === uid && self.gid === gid) {\n    // No need to override if it's already what we used.\n    return;\n  }\n  try {\n    chownr.sync(filepath, typeof uid === 'number' ? uid : self.uid, typeof gid === 'number' ? gid : self.gid);\n  } catch (err) {\n    // only catch ENOENT, any other error is a problem.\n    if (err.code === 'ENOENT') {\n      return null;\n    }\n    throw err;\n  }\n}\nmodule.exports.mkdirfix = mkdirfix;\nfunction mkdirfix(cache, p, cb) {\n  // we have to infer the owner _before_ making the directory, even though\n  // we aren't going to use the results, since the cache itself might not\n  // exist yet.  If we mkdirp it, then our current uid/gid will be assumed\n  // to be correct if it creates the cache folder in the process.\n  return BB.resolve(inferOwner(cache)).then(() => {\n    return mkdirp(p).then(made => {\n      if (made) {\n        return fixOwner(cache, made).then(() => made);\n      }\n    }).catch({\n      code: 'EEXIST'\n    }, () => {\n      // There's a race in mkdirp!\n      return fixOwner(cache, p).then(() => null);\n    });\n  });\n}\nmodule.exports.mkdirfix.sync = mkdirfixSync;\nfunction mkdirfixSync(cache, p) {\n  try {\n    inferOwner.sync(cache);\n    const made = mkdirp.sync(p);\n    if (made) {\n      fixOwnerSync(cache, made);\n      return made;\n    }\n  } catch (err) {\n    if (err.code === 'EEXIST') {\n      fixOwnerSync(cache, p);\n      return null;\n    } else {\n      throw err;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
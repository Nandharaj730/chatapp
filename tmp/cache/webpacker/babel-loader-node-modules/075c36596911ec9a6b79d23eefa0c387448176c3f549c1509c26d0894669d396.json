{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\nconst TOMBSTONE = {};\nconst UNDEFINED_MARKER = {};\nclass StackedSetMap {\n  constructor(parentStack) {\n    this.stack = parentStack === undefined ? [] : parentStack.slice();\n    this.map = new Map();\n    this.stack.push(this.map);\n  }\n  add(item) {\n    this.map.set(item, true);\n  }\n  set(item, value) {\n    this.map.set(item, value === undefined ? UNDEFINED_MARKER : value);\n  }\n  delete(item) {\n    if (this.stack.length > 1) {\n      this.map.set(item, TOMBSTONE);\n    } else {\n      this.map.delete(item);\n    }\n  }\n  has(item) {\n    const topValue = this.map.get(item);\n    if (topValue !== undefined) return topValue !== TOMBSTONE;\n    if (this.stack.length > 1) {\n      for (var i = this.stack.length - 2; i >= 0; i--) {\n        const value = this.stack[i].get(item);\n        if (value !== undefined) {\n          this.map.set(item, value);\n          return value !== TOMBSTONE;\n        }\n      }\n      this.map.set(item, TOMBSTONE);\n    }\n    return false;\n  }\n  get(item) {\n    const topValue = this.map.get(item);\n    if (topValue !== undefined) {\n      return topValue === TOMBSTONE || topValue === UNDEFINED_MARKER ? undefined : topValue;\n    }\n    if (this.stack.length > 1) {\n      for (var i = this.stack.length - 2; i >= 0; i--) {\n        const value = this.stack[i].get(item);\n        if (value !== undefined) {\n          this.map.set(item, value);\n          return value === TOMBSTONE || value === UNDEFINED_MARKER ? undefined : value;\n        }\n      }\n      this.map.set(item, TOMBSTONE);\n    }\n    return undefined;\n  }\n  _compress() {\n    if (this.stack.length === 1) return;\n    this.map = new Map();\n    for (const data of this.stack) {\n      for (const pair of data) {\n        if (pair[1] === TOMBSTONE) {\n          this.map.delete(pair[0]);\n        } else {\n          this.map.set(pair[0], pair[1]);\n        }\n      }\n    }\n    this.stack = [this.map];\n  }\n  asArray() {\n    this._compress();\n    return Array.from(this.map.entries(), pair => pair[0]);\n  }\n  asSet() {\n    return new Set(this.asArray());\n  }\n  asPairArray() {\n    this._compress();\n    return Array.from(this.map.entries(), pair => /** @type {[TODO, TODO]} */pair[1] === UNDEFINED_MARKER ? [pair[0], undefined] : pair);\n  }\n  asMap() {\n    return new Map(this.asPairArray());\n  }\n  get size() {\n    this._compress();\n    return this.map.size;\n  }\n  createChild() {\n    return new StackedSetMap(this.stack);\n  }\n  get length() {\n    throw new Error(\"This is no longer an Array\");\n  }\n  set length(value) {\n    throw new Error(\"This is no longer an Array\");\n  }\n}\n\n// TODO remove in webpack 5\nStackedSetMap.prototype.push = util.deprecate(\n/**\n * @deprecated\n * @this {StackedSetMap}\n * @param {any} item Item to add\n * @returns {void}\n */\nfunction (item) {\n  this.add(item);\n}, \"This is no longer an Array: Use add instead.\");\nmodule.exports = StackedSetMap;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst CriticalDependencyWarning = require(\"./CriticalDependencyWarning\");\nconst regExpToString = r => r ? r + \"\" : \"\";\nclass ContextDependency extends Dependency {\n  // options: { request, recursive, regExp, include, exclude, mode, chunkName, groupOptions }\n  constructor(options) {\n    super();\n    this.options = options;\n    this.userRequest = this.options.request;\n    /** @type {false | string} */\n    this.critical = false;\n    this.hadGlobalOrStickyRegExp = false;\n    if (this.options.regExp.global || this.options.regExp.sticky) {\n      this.options.regExp = null;\n      this.hadGlobalOrStickyRegExp = true;\n    }\n  }\n  getResourceIdentifier() {\n    return `context${this.options.request} ${this.options.recursive} ` + `${regExpToString(this.options.regExp)} ${regExpToString(this.options.include)} ${regExpToString(this.options.exclude)} ` + `${this.options.mode} ${this.options.chunkName} ` + `${JSON.stringify(this.options.groupOptions)}`;\n  }\n  getWarnings() {\n    let warnings = super.getWarnings() || [];\n    if (this.critical) {\n      warnings.push(new CriticalDependencyWarning(this.critical));\n    }\n    if (this.hadGlobalOrStickyRegExp) {\n      warnings.push(new CriticalDependencyWarning(\"Contexts can't use RegExps with the 'g' or 'y' flags.\"));\n    }\n    return warnings;\n  }\n}\n\n// TODO remove in webpack 5\nObject.defineProperty(ContextDependency.prototype, \"async\", {\n  configurable: false,\n  get() {\n    throw new Error(\"ContextDependency.async was removed. Use ContextDependency.options.mode instead.\");\n  },\n  set() {\n    throw new Error(\"ContextDependency.async was removed. Pass options.mode to constructor instead\");\n  }\n});\nmodule.exports = ContextDependency;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
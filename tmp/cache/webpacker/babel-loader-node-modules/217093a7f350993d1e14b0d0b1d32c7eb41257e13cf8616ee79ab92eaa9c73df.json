{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ImportContextDependency = require(\"./ImportContextDependency\");\nconst ImportWeakDependency = require(\"./ImportWeakDependency\");\nconst ImportDependenciesBlock = require(\"./ImportDependenciesBlock\");\nconst ImportEagerDependency = require(\"./ImportEagerDependency\");\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\nconst UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\nconst CommentCompilationWarning = require(\"../CommentCompilationWarning\");\nclass ImportParserPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(parser) {\n    parser.hooks.importCall.tap(\"ImportParserPlugin\", expr => {\n      if (expr.arguments.length !== 1) {\n        throw new Error(\"Incorrect number of arguments provided to 'import(module: string) -> Promise'.\");\n      }\n      const param = parser.evaluateExpression(expr.arguments[0]);\n      let chunkName = null;\n      let mode = \"lazy\";\n      let include = null;\n      let exclude = null;\n      const groupOptions = {};\n      const _parser$parseCommentO = parser.parseCommentOptions(expr.range),\n        importOptions = _parser$parseCommentO.options,\n        commentErrors = _parser$parseCommentO.errors;\n      if (commentErrors) {\n        for (const e of commentErrors) {\n          const comment = e.comment;\n          parser.state.module.warnings.push(new CommentCompilationWarning(`Compilation error while processing magic comment(-s): /*${comment.value}*/: ${e.message}`, parser.state.module, comment.loc));\n        }\n      }\n      if (importOptions) {\n        if (importOptions.webpackIgnore !== undefined) {\n          if (typeof importOptions.webpackIgnore !== \"boolean\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackIgnore\\` expected a boolean, but received: ${importOptions.webpackIgnore}.`, expr.loc));\n          } else {\n            // Do not instrument `import()` if `webpackIgnore` is `true`\n            if (importOptions.webpackIgnore) {\n              return false;\n            }\n          }\n        }\n        if (importOptions.webpackChunkName !== undefined) {\n          if (typeof importOptions.webpackChunkName !== \"string\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackChunkName\\` expected a string, but received: ${importOptions.webpackChunkName}.`, expr.loc));\n          } else {\n            chunkName = importOptions.webpackChunkName;\n          }\n        }\n        if (importOptions.webpackMode !== undefined) {\n          if (typeof importOptions.webpackMode !== \"string\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackMode\\` expected a string, but received: ${importOptions.webpackMode}.`, expr.loc));\n          } else {\n            mode = importOptions.webpackMode;\n          }\n        }\n        if (importOptions.webpackPrefetch !== undefined) {\n          if (importOptions.webpackPrefetch === true) {\n            groupOptions.prefetchOrder = 0;\n          } else if (typeof importOptions.webpackPrefetch === \"number\") {\n            groupOptions.prefetchOrder = importOptions.webpackPrefetch;\n          } else {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackPrefetch\\` expected true or a number, but received: ${importOptions.webpackPrefetch}.`, expr.loc));\n          }\n        }\n        if (importOptions.webpackPreload !== undefined) {\n          if (importOptions.webpackPreload === true) {\n            groupOptions.preloadOrder = 0;\n          } else if (typeof importOptions.webpackPreload === \"number\") {\n            groupOptions.preloadOrder = importOptions.webpackPreload;\n          } else {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackPreload\\` expected true or a number, but received: ${importOptions.webpackPreload}.`, expr.loc));\n          }\n        }\n        if (importOptions.webpackInclude !== undefined) {\n          if (!importOptions.webpackInclude || importOptions.webpackInclude.constructor.name !== \"RegExp\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackInclude\\` expected a regular expression, but received: ${importOptions.webpackInclude}.`, expr.loc));\n          } else {\n            include = new RegExp(importOptions.webpackInclude);\n          }\n        }\n        if (importOptions.webpackExclude !== undefined) {\n          if (!importOptions.webpackExclude || importOptions.webpackExclude.constructor.name !== \"RegExp\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackExclude\\` expected a regular expression, but received: ${importOptions.webpackExclude}.`, expr.loc));\n          } else {\n            exclude = new RegExp(importOptions.webpackExclude);\n          }\n        }\n      }\n      if (param.isString()) {\n        if (mode !== \"lazy\" && mode !== \"eager\" && mode !== \"weak\") {\n          parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackMode\\` expected 'lazy', 'eager' or 'weak', but received: ${mode}.`, expr.loc));\n        }\n        if (mode === \"eager\") {\n          const dep = new ImportEagerDependency(param.string, parser.state.module, expr.range);\n          parser.state.current.addDependency(dep);\n        } else if (mode === \"weak\") {\n          const dep = new ImportWeakDependency(param.string, parser.state.module, expr.range);\n          parser.state.current.addDependency(dep);\n        } else {\n          const depBlock = new ImportDependenciesBlock(param.string, expr.range, Object.assign(groupOptions, {\n            name: chunkName\n          }), parser.state.module, expr.loc, parser.state.module);\n          parser.state.current.addBlock(depBlock);\n        }\n        return true;\n      } else {\n        if (mode !== \"lazy\" && mode !== \"lazy-once\" && mode !== \"eager\" && mode !== \"weak\") {\n          parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, `\\`webpackMode\\` expected 'lazy', 'lazy-once', 'eager' or 'weak', but received: ${mode}.`, expr.loc));\n          mode = \"lazy\";\n        }\n        if (mode === \"weak\") {\n          mode = \"async-weak\";\n        }\n        const dep = ContextDependencyHelpers.create(ImportContextDependency, expr.range, param, expr, this.options, {\n          chunkName,\n          groupOptions,\n          include,\n          exclude,\n          mode,\n          namespaceObject: parser.state.module.buildMeta.strictHarmonyModule ? \"strict\" : true\n        }, parser);\n        if (!dep) return;\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      }\n    });\n  }\n}\nmodule.exports = ImportParserPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
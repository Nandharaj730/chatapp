{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\nconst LINE_MAPPING = \";AAAA\";\nclass SingleLineNode {\n  constructor(generatedCode, source, originalSource, line) {\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.line = line || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n  clone() {\n    return new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n  }\n  getGeneratedCode() {\n    return this.generatedCode;\n  }\n  getMappings(mappingsContext) {\n    if (!this.generatedCode) return \"\";\n    const lines = this._numberOfLines;\n    const sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n    let mappings = \"A\"; // generated column 0\n    if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n    mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n    mappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n    mappings += \"A\"; // original column 0\n    mappingsContext.currentSource = sourceIdx;\n    mappingsContext.currentOriginalLine = this.line;\n    const unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n    mappings += Array(lines).join(LINE_MAPPING);\n    if (unfinishedGeneratedLine === 0) {\n      mappings += \";\";\n    } else {\n      if (lines !== 0) mappings += LINE_MAPPING;\n    }\n    return mappings;\n  }\n  getNormalizedNodes() {\n    return [this];\n  }\n  mapGeneratedCode(fn) {\n    const generatedCode = fn(this.generatedCode);\n    return new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n  }\n  merge(otherNode) {\n    if (otherNode instanceof SingleLineNode) {\n      return this.mergeSingleLineNode(otherNode);\n    }\n    return false;\n  }\n  mergeSingleLineNode(otherNode) {\n    if (this.source === otherNode.source && this.originalSource === otherNode.originalSource) {\n      if (this.line === otherNode.line) {\n        this.generatedCode += otherNode.generatedCode;\n        this._numberOfLines += otherNode._numberOfLines;\n        this._endsWithNewLine = otherNode._endsWithNewLine;\n        return this;\n      } else if (this.line + 1 === otherNode.line && this._endsWithNewLine && this._numberOfLines === 1 && otherNode._numberOfLines <= 1) {\n        return new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n      }\n    }\n    return false;\n  }\n}\nmodule.exports = SingleLineNode;\nconst SourceNode = require(\"./SourceNode\"); // circular dependency","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createHash = require(\"./util/createHash\");\nconst RequestShortener = require(\"./RequestShortener\");\nconst getHash = str => {\n  const hash = createHash(\"md4\");\n  hash.update(str);\n  const digest = /** @type {string} */hash.digest(\"hex\");\n  return digest.substr(0, 4);\n};\nclass NamedModulesPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"NamedModulesPlugin\", compilation => {\n      compilation.hooks.beforeModuleIds.tap(\"NamedModulesPlugin\", modules => {\n        const namedModules = new Map();\n        const context = this.options.context || compiler.options.context;\n        for (const module of modules) {\n          if (module.id === null && module.libIdent) {\n            module.id = module.libIdent({\n              context\n            });\n          }\n          if (module.id !== null) {\n            const namedModule = namedModules.get(module.id);\n            if (namedModule !== undefined) {\n              namedModule.push(module);\n            } else {\n              namedModules.set(module.id, [module]);\n            }\n          }\n        }\n        for (const namedModule of namedModules.values()) {\n          if (namedModule.length > 1) {\n            for (const module of namedModule) {\n              const requestShortener = new RequestShortener(context);\n              module.id = `${module.id}?${getHash(requestShortener.shorten(module.identifier()))}`;\n            }\n          }\n        }\n      });\n    });\n  }\n}\nmodule.exports = NamedModulesPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\n\n/** @typedef {import(\"./Module\")} Module */\n\nclass ModuleParseError extends WebpackError {\n  /**\n   * @param {Module} module the errored module\n   * @param {string} source source code\n   * @param {Error&any} err the parse error\n   * @param {string[]} loaders the loaders used\n   */\n  constructor(module, source, err, loaders) {\n    let message = \"Module parse failed: \" + err.message;\n    let loc = undefined;\n    if (loaders.length >= 1) {\n      message += `\\nFile was processed with these loaders:${loaders.map(loader => `\\n * ${loader}`).join(\"\")}`;\n      message += \"\\nYou may need an additional loader to handle the result of these loaders.\";\n    } else {\n      message += \"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n    }\n    if (err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n      var lineNumber = err.loc.line;\n      if (/[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)) {\n        // binary file\n        message += \"\\n(Source code omitted for this binary file)\";\n      } else {\n        const sourceLines = source.split(/\\r?\\n/);\n        const start = Math.max(0, lineNumber - 3);\n        const linesBefore = sourceLines.slice(start, lineNumber - 1);\n        const theLine = sourceLines[lineNumber - 1];\n        const linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n        message += linesBefore.map(l => `\\n| ${l}`).join(\"\") + `\\n> ${theLine}` + linesAfter.map(l => `\\n| ${l}`).join(\"\");\n      }\n      loc = err.loc;\n    } else {\n      message += \"\\n\" + err.stack;\n    }\n    super(message);\n    this.name = \"ModuleParseError\";\n    this.module = module;\n    this.loc = loc;\n    this.error = err;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nmodule.exports = ModuleParseError;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
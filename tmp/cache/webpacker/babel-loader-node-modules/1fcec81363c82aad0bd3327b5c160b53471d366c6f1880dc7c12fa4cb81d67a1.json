{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar SourceNode = require(\"source-map\").SourceNode;\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\nvar SourceMapGenerator = require(\"source-map\").SourceMapGenerator;\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\nvar fromStringWithSourceMap = require(\"source-list-map\").fromStringWithSourceMap;\nvar Source = require(\"./Source\");\nvar applySourceMap = require(\"./applySourceMap\");\nclass SourceMapSource extends Source {\n  constructor(value, name, sourceMap, originalSource, innerSourceMap, removeOriginalSource) {\n    super();\n    this._value = value;\n    this._name = name;\n    this._sourceMap = sourceMap;\n    this._originalSource = originalSource;\n    this._innerSourceMap = innerSourceMap;\n    this._removeOriginalSource = removeOriginalSource;\n  }\n  source() {\n    return this._value;\n  }\n  node(options) {\n    var sourceMap = this._sourceMap;\n    var node = SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));\n    node.setSourceContent(this._name, this._originalSource);\n    var innerSourceMap = this._innerSourceMap;\n    if (innerSourceMap) {\n      node = applySourceMap(node, new SourceMapConsumer(innerSourceMap), this._name, this._removeOriginalSource);\n    }\n    return node;\n  }\n  listMap(options) {\n    options = options || {};\n    if (options.module === false) return new SourceListMap(this._value, this._name, this._value);\n    return fromStringWithSourceMap(this._value, typeof this._sourceMap === \"string\" ? JSON.parse(this._sourceMap) : this._sourceMap);\n  }\n  updateHash(hash) {\n    hash.update(this._value);\n    if (this._originalSource) hash.update(this._originalSource);\n  }\n}\nrequire(\"./SourceAndMapMixin\")(SourceMapSource.prototype);\nmodule.exports = SourceMapSource;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nclass RootPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source hook\n   * @param {Array<string>} root roots\n   * @param {string | ResolveStepHook} target target hook\n   * @param {boolean=} ignoreErrors ignore error during resolving of root paths\n   */\n  constructor(source, root, target, ignoreErrors) {\n    this.root = root;\n    this.source = source;\n    this.target = target;\n    this._ignoreErrors = ignoreErrors;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"RootPlugin\", (request, resolveContext, callback) => {\n      const req = request.request;\n      if (!req) return callback();\n      if (!req.startsWith(\"/\")) return callback();\n      const path = resolver.join(this.root, req.slice(1));\n      const obj = Object.assign(request, {\n        path,\n        relativePath: request.relativePath && path\n      });\n      resolver.doResolve(target, obj, `root path ${this.root}`, resolveContext, this._ignoreErrors ? (err, result) => {\n        if (err) {\n          if (resolveContext.log) {\n            resolveContext.log(`Ignored fatal error while resolving root path:\\n${err}`);\n          }\n          return callback();\n        }\n        if (result) return callback(null, result);\n        callback();\n      } : callback);\n    });\n  }\n}\nmodule.exports = RootPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
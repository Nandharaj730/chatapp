{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nfunction loadDescriptionFile(resolver, directory, filenames, resolveContext, callback) {\n  (function findDescriptionFile() {\n    forEachBail(filenames, (filename, callback) => {\n      const descriptionFilePath = resolver.join(directory, filename);\n      if (resolver.fileSystem.readJson) {\n        resolver.fileSystem.readJson(descriptionFilePath, (err, content) => {\n          if (err) {\n            if (typeof err.code !== \"undefined\") return callback();\n            return onJson(err);\n          }\n          onJson(null, content);\n        });\n      } else {\n        resolver.fileSystem.readFile(descriptionFilePath, (err, content) => {\n          if (err) return callback();\n          let json;\n          try {\n            json = JSON.parse(content);\n          } catch (e) {\n            onJson(e);\n          }\n          onJson(null, json);\n        });\n      }\n      function onJson(err, content) {\n        if (err) {\n          if (resolveContext.log) resolveContext.log(descriptionFilePath + \" (directory description file): \" + err);else err.message = descriptionFilePath + \" (directory description file): \" + err;\n          return callback(err);\n        }\n        callback(null, {\n          content: content,\n          directory: directory,\n          path: descriptionFilePath\n        });\n      }\n    }, (err, result) => {\n      if (err) return callback(err);\n      if (result) {\n        return callback(null, result);\n      } else {\n        directory = cdUp(directory);\n        if (!directory) {\n          return callback();\n        } else {\n          return findDescriptionFile();\n        }\n      }\n    });\n  })();\n}\nfunction getField(content, field) {\n  if (!content) return undefined;\n  if (Array.isArray(field)) {\n    let current = content;\n    for (let j = 0; j < field.length; j++) {\n      if (current === null || typeof current !== \"object\") {\n        current = null;\n        break;\n      }\n      current = current[field[j]];\n    }\n    if (typeof current === \"object\") {\n      return current;\n    }\n  } else {\n    if (typeof content[field] === \"object\") {\n      return content[field];\n    }\n  }\n}\nfunction cdUp(directory) {\n  if (directory === \"/\") return null;\n  const i = directory.lastIndexOf(\"/\"),\n    j = directory.lastIndexOf(\"\\\\\");\n  const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n  if (p < 0) return null;\n  return directory.substr(0, p || 1);\n}\nexports.loadDescriptionFile = loadDescriptionFile;\nexports.getField = getField;\nexports.cdUp = cdUp;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
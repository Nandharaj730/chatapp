{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\nconst isInside = (path, parent) => {\n  if (!path.startsWith(parent)) return false;\n  if (path.length === parent.length) return true;\n  const charCode = path.charCodeAt(parent.length);\n  return charCode === slashCode || charCode === backslashCode;\n};\nmodule.exports = class RestrictionsPlugin {\n  constructor(source, restrictions) {\n    this.source = source;\n    this.restrictions = restrictions;\n  }\n  apply(resolver) {\n    resolver.getHook(this.source).tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n      if (typeof request.path === \"string\") {\n        const path = request.path;\n        for (let i = 0; i < this.restrictions.length; i++) {\n          const rule = this.restrictions[i];\n          if (typeof rule === \"string\") {\n            if (!isInside(path, rule)) {\n              if (resolveContext.log) {\n                resolveContext.log(`${path} is not inside of the restriction ${rule}`);\n              }\n              return callback(null, null);\n            }\n          } else if (!rule.test(path)) {\n            if (resolveContext.log) {\n              resolveContext.log(`${path} doesn't match the restriction ${rule}`);\n            }\n            return callback(null, null);\n          }\n        }\n      }\n      callback();\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
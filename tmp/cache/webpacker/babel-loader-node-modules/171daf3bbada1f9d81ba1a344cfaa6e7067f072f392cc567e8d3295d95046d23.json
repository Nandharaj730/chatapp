{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n  OriginalSource = _require.OriginalSource,\n  RawSource = _require.RawSource;\nconst Module = require(\"./Module\");\nconst WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\n\n/** @typedef {import(\"./dependencies/ModuleDependency\")} ModuleDependency */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\nclass DelegatedModule extends Module {\n  constructor(sourceRequest, data, type, userRequest, originalRequest) {\n    super(\"javascript/dynamic\", null);\n\n    // Info from Factory\n    this.sourceRequest = sourceRequest;\n    this.request = data.id;\n    this.type = type;\n    this.userRequest = userRequest;\n    this.originalRequest = originalRequest;\n    this.delegateData = data;\n\n    // Build info\n    this.delegatedSourceDependency = undefined;\n  }\n  libIdent(options) {\n    return typeof this.originalRequest === \"string\" ? this.originalRequest : this.originalRequest.libIdent(options);\n  }\n  identifier() {\n    return `delegated ${JSON.stringify(this.request)} from ${this.sourceRequest}`;\n  }\n  readableIdentifier() {\n    return `delegated ${this.userRequest} from ${this.sourceRequest}`;\n  }\n  needRebuild() {\n    return false;\n  }\n  build(options, compilation, resolver, fs, callback) {\n    this.built = true;\n    this.buildMeta = Object.assign({}, this.delegateData.buildMeta);\n    this.buildInfo = {};\n    this.delegatedSourceDependency = new DelegatedSourceDependency(this.sourceRequest);\n    this.addDependency(this.delegatedSourceDependency);\n    this.addDependency(new DelegatedExportsDependency(this, this.delegateData.exports || true));\n    callback();\n  }\n  source(depTemplates, runtime) {\n    const dep = /** @type {DelegatedSourceDependency} */this.dependencies[0];\n    const sourceModule = dep.module;\n    let str;\n    if (!sourceModule) {\n      str = WebpackMissingModule.moduleCode(this.sourceRequest);\n    } else {\n      str = `module.exports = (${runtime.moduleExports({\n        module: sourceModule,\n        request: dep.request\n      })})`;\n      switch (this.type) {\n        case \"require\":\n          str += `(${JSON.stringify(this.request)})`;\n          break;\n        case \"object\":\n          str += `[${JSON.stringify(this.request)}]`;\n          break;\n      }\n      str += \";\";\n    }\n    if (this.useSourceMap) {\n      return new OriginalSource(str, this.identifier());\n    } else {\n      return new RawSource(str);\n    }\n  }\n  size() {\n    return 42;\n  }\n\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @returns {void}\n   */\n  updateHash(hash) {\n    hash.update(this.type);\n    hash.update(JSON.stringify(this.request));\n    super.updateHash(hash);\n  }\n}\nmodule.exports = DelegatedModule;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
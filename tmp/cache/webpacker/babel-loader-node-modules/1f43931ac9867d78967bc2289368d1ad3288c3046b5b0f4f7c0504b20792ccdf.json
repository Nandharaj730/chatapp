{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\nconst _require = require(\"./ErrorHelpers\"),\n  cutOffLoaderExecution = _require.cutOffLoaderExecution;\nclass ModuleBuildError extends WebpackError {\n  constructor(module, err) {\n    let _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$from = _ref.from,\n      from = _ref$from === void 0 ? null : _ref$from;\n    let message = \"Module build failed\";\n    let details = undefined;\n    if (from) {\n      message += ` (from ${from}):\\n`;\n    } else {\n      message += \": \";\n    }\n    if (err !== null && typeof err === \"object\") {\n      if (typeof err.stack === \"string\" && err.stack) {\n        const stack = cutOffLoaderExecution(err.stack);\n        if (!err.hideStack) {\n          message += stack;\n        } else {\n          details = stack;\n          if (typeof err.message === \"string\" && err.message) {\n            message += err.message;\n          } else {\n            message += err;\n          }\n        }\n      } else if (typeof err.message === \"string\" && err.message) {\n        message += err.message;\n      } else {\n        message += err;\n      }\n    } else {\n      message = err;\n    }\n    super(message);\n    this.name = \"ModuleBuildError\";\n    this.details = details;\n    this.module = module;\n    this.error = err;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nmodule.exports = ModuleBuildError;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\nconst WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\nclass ReadFileCompileWasmTemplatePlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ReadFileCompileWasmTemplatePlugin\", compilation => {\n      const generateLoadBinaryCode = path => Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", \"try {\", Template.indent([`readFile(join(__dirname, ${path}), function(err, buffer){`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return Promise.resolve(buffer); }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n      const plugin = new WasmMainTemplatePlugin(Object.assign({\n        generateLoadBinaryCode,\n        supportsStreaming: false\n      }, this.options));\n      plugin.apply(compilation.mainTemplate);\n    });\n  }\n}\nmodule.exports = ReadFileCompileWasmTemplatePlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
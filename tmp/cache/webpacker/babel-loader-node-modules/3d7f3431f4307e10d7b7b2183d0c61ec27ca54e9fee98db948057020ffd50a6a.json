{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst ContextElementDependency = require(\"./dependencies/ContextElementDependency\");\nclass ContextReplacementPlugin {\n  constructor(resourceRegExp, newContentResource, newContentRecursive, newContentRegExp) {\n    this.resourceRegExp = resourceRegExp;\n    if (typeof newContentResource === \"function\") {\n      this.newContentCallback = newContentResource;\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"object\") {\n      this.newContentResource = newContentResource;\n      this.newContentCreateContextMap = (fs, callback) => {\n        callback(null, newContentRecursive);\n      };\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"function\") {\n      this.newContentResource = newContentResource;\n      this.newContentCreateContextMap = newContentRecursive;\n    } else {\n      if (typeof newContentResource !== \"string\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = newContentResource;\n        newContentResource = undefined;\n      }\n      if (typeof newContentRecursive !== \"boolean\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = undefined;\n      }\n      this.newContentResource = newContentResource;\n      this.newContentRecursive = newContentRecursive;\n      this.newContentRegExp = newContentRegExp;\n    }\n  }\n  apply(compiler) {\n    const resourceRegExp = this.resourceRegExp;\n    const newContentCallback = this.newContentCallback;\n    const newContentResource = this.newContentResource;\n    const newContentRecursive = this.newContentRecursive;\n    const newContentRegExp = this.newContentRegExp;\n    const newContentCreateContextMap = this.newContentCreateContextMap;\n    compiler.hooks.contextModuleFactory.tap(\"ContextReplacementPlugin\", cmf => {\n      cmf.hooks.beforeResolve.tap(\"ContextReplacementPlugin\", result => {\n        if (!result) return;\n        if (resourceRegExp.test(result.request)) {\n          if (newContentResource !== undefined) {\n            result.request = newContentResource;\n          }\n          if (newContentRecursive !== undefined) {\n            result.recursive = newContentRecursive;\n          }\n          if (newContentRegExp !== undefined) {\n            result.regExp = newContentRegExp;\n          }\n          if (typeof newContentCallback === \"function\") {\n            newContentCallback(result);\n          } else {\n            for (const d of result.dependencies) {\n              if (d.critical) d.critical = false;\n            }\n          }\n        }\n        return result;\n      });\n      cmf.hooks.afterResolve.tap(\"ContextReplacementPlugin\", result => {\n        if (!result) return;\n        if (resourceRegExp.test(result.resource)) {\n          if (newContentResource !== undefined) {\n            result.resource = path.resolve(result.resource, newContentResource);\n          }\n          if (newContentRecursive !== undefined) {\n            result.recursive = newContentRecursive;\n          }\n          if (newContentRegExp !== undefined) {\n            result.regExp = newContentRegExp;\n          }\n          if (typeof newContentCreateContextMap === \"function\") {\n            result.resolveDependencies = createResolveDependenciesFromContextMap(newContentCreateContextMap);\n          }\n          if (typeof newContentCallback === \"function\") {\n            const origResource = result.resource;\n            newContentCallback(result);\n            if (result.resource !== origResource) {\n              result.resource = path.resolve(origResource, result.resource);\n            }\n          } else {\n            for (const d of result.dependencies) {\n              if (d.critical) d.critical = false;\n            }\n          }\n        }\n        return result;\n      });\n    });\n  }\n}\nconst createResolveDependenciesFromContextMap = createContextMap => {\n  const resolveDependenciesFromContextMap = (fs, options, callback) => {\n    createContextMap(fs, (err, map) => {\n      if (err) return callback(err);\n      const dependencies = Object.keys(map).map(key => {\n        return new ContextElementDependency(map[key] + options.resourceQuery, key);\n      });\n      callback(null, dependencies);\n    });\n  };\n  return resolveDependenciesFromContextMap;\n};\nmodule.exports = ContextReplacementPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
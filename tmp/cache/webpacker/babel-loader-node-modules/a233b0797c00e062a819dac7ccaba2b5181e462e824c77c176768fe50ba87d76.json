{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ParserHelpers = require(\"./ParserHelpers\");\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst NullFactory = require(\"./NullFactory\");\nclass ProvidePlugin {\n  constructor(definitions) {\n    this.definitions = definitions;\n  }\n  apply(compiler) {\n    const definitions = this.definitions;\n    compiler.hooks.compilation.tap(\"ProvidePlugin\", (compilation, _ref) => {\n      let normalModuleFactory = _ref.normalModuleFactory;\n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      const handler = (parser, parserOptions) => {\n        Object.keys(definitions).forEach(name => {\n          var request = [].concat(definitions[name]);\n          var splittedName = name.split(\".\");\n          if (splittedName.length > 0) {\n            splittedName.slice(1).forEach((_, i) => {\n              const name = splittedName.slice(0, i + 1).join(\".\");\n              parser.hooks.canRename.for(name).tap(\"ProvidePlugin\", ParserHelpers.approve);\n            });\n          }\n          parser.hooks.expression.for(name).tap(\"ProvidePlugin\", expr => {\n            let nameIdentifier = name;\n            const scopedName = name.includes(\".\");\n            let expression = `require(${JSON.stringify(request[0])})`;\n            if (scopedName) {\n              nameIdentifier = `__webpack_provided_${name.replace(/\\./g, \"_dot_\")}`;\n            }\n            if (request.length > 1) {\n              expression += request.slice(1).map(r => `[${JSON.stringify(r)}]`).join(\"\");\n            }\n            if (!ParserHelpers.addParsedVariableToModule(parser, nameIdentifier, expression)) {\n              return false;\n            }\n            if (scopedName) {\n              ParserHelpers.toConstantDependency(parser, nameIdentifier)(expr);\n            }\n            return true;\n          });\n        });\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ProvidePlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ProvidePlugin\", handler);\n\n      // Disable ProvidePlugin for javascript/esm, see https://github.com/webpack/webpack/issues/7032\n    });\n  }\n}\n\nmodule.exports = ProvidePlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nconst WebpackError = require(\"./WebpackError\");\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nclass DllReferencePlugin {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  constructor(options) {\n    validateOptions(schema, options, \"Dll Reference Plugin\");\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, _ref) => {\n      let normalModuleFactory = _ref.normalModuleFactory;\n      compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());\n    });\n    compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", (params, callback) => {\n      if (\"manifest\" in this.options) {\n        const manifest = this.options.manifest;\n        if (typeof manifest === \"string\") {\n          params.compilationDependencies.add(manifest);\n          compiler.inputFileSystem.readFile(manifest, (err, result) => {\n            if (err) return callback(err);\n            // Catch errors parsing the manifest so that blank\n            // or malformed manifest files don't kill the process.\n            try {\n              params[\"dll reference \" + manifest] = parseJson(result.toString(\"utf-8\"));\n            } catch (e) {\n              // Store the error in the params so that it can\n              // be added as a compilation error later on.\n              const manifestPath = makePathsRelative(compiler.options.context, manifest);\n              params[\"dll reference parse error \" + manifest] = new DllManifestError(manifestPath, e.message);\n            }\n            return callback();\n          });\n          return;\n        }\n      }\n      return callback();\n    });\n    compiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n      let name = this.options.name;\n      let sourceType = this.options.sourceType;\n      let content = \"content\" in this.options ? this.options.content : undefined;\n      if (\"manifest\" in this.options) {\n        let manifestParameter = this.options.manifest;\n        let manifest;\n        if (typeof manifestParameter === \"string\") {\n          // If there was an error parsing the manifest\n          // file, exit now because the error will be added\n          // as a compilation error in the \"compilation\" hook.\n          if (params[\"dll reference parse error \" + manifestParameter]) {\n            return;\n          }\n          manifest = /** @type {DllReferencePluginOptionsManifest} */params[\"dll reference \" + manifestParameter];\n        } else {\n          manifest = manifestParameter;\n        }\n        if (manifest) {\n          if (!name) name = manifest.name;\n          if (!sourceType) sourceType = manifest.type;\n          if (!content) content = manifest.content;\n        }\n      }\n      const externals = {};\n      const source = \"dll-reference \" + name;\n      externals[source] = name;\n      const normalModuleFactory = params.normalModuleFactory;\n      new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n      new DelegatedModuleFactoryPlugin({\n        source: source,\n        type: this.options.type,\n        scope: this.options.scope,\n        context: this.options.context || compiler.options.context,\n        content,\n        extensions: this.options.extensions\n      }).apply(normalModuleFactory);\n    });\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, params) => {\n      if (\"manifest\" in this.options) {\n        let manifest = this.options.manifest;\n        if (typeof manifest === \"string\") {\n          // If there was an error parsing the manifest file, add the\n          // error as a compilation error to make the compilation fail.\n          let e = params[\"dll reference parse error \" + manifest];\n          if (e) {\n            compilation.errors.push(e);\n          }\n        }\n      }\n    });\n  }\n}\nclass DllManifestError extends WebpackError {\n  constructor(filename, message) {\n    super();\n    this.name = \"DllManifestError\";\n    this.message = `Dll manifest ${filename}\\n${message}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nmodule.exports = DllReferencePlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
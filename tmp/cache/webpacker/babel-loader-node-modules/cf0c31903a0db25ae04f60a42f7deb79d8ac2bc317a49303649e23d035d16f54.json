{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nconst asyncLib = require(\"neo-async\");\nclass CachePlugin {\n  constructor(cache) {\n    this.cache = cache || {};\n    this.FS_ACCURACY = 2000;\n  }\n  apply(compiler) {\n    if (Array.isArray(compiler.compilers)) {\n      compiler.compilers.forEach((c, idx) => {\n        new CachePlugin(this.cache[idx] = this.cache[idx] || {}).apply(c);\n      });\n    } else {\n      const registerCacheToCompiler = (compiler, cache) => {\n        compiler.hooks.thisCompilation.tap(\"CachePlugin\", compilation => {\n          compilation.cache = cache;\n          compilation.hooks.childCompiler.tap(\"CachePlugin\", (childCompiler, compilerName, compilerIndex) => {\n            let childCache;\n            if (!cache.children) {\n              cache.children = {};\n            }\n            if (!cache.children[compilerName]) {\n              cache.children[compilerName] = [];\n            }\n            if (cache.children[compilerName][compilerIndex]) {\n              childCache = cache.children[compilerName][compilerIndex];\n            } else {\n              cache.children[compilerName].push(childCache = {});\n            }\n            registerCacheToCompiler(childCompiler, childCache);\n          });\n        });\n      };\n      registerCacheToCompiler(compiler, this.cache);\n      compiler.hooks.watchRun.tap(\"CachePlugin\", () => {\n        this.watching = true;\n      });\n      compiler.hooks.run.tapAsync(\"CachePlugin\", (compiler, callback) => {\n        if (!compiler._lastCompilationFileDependencies) {\n          return callback();\n        }\n        const fs = compiler.inputFileSystem;\n        const fileTs = compiler.fileTimestamps = new Map();\n        asyncLib.forEach(compiler._lastCompilationFileDependencies, (file, callback) => {\n          fs.stat(file, (err, stat) => {\n            if (err) {\n              if (err.code === \"ENOENT\") return callback();\n              return callback(err);\n            }\n            if (stat.mtime) this.applyMtime(+stat.mtime);\n            fileTs.set(file, +stat.mtime || Infinity);\n            callback();\n          });\n        }, err => {\n          if (err) return callback(err);\n          for (const _ref of fileTs) {\n            var _ref2 = _slicedToArray(_ref, 2);\n            const file = _ref2[0];\n            const ts = _ref2[1];\n            fileTs.set(file, ts + this.FS_ACCURACY);\n          }\n          callback();\n        });\n      });\n      compiler.hooks.afterCompile.tap(\"CachePlugin\", compilation => {\n        compilation.compiler._lastCompilationFileDependencies = compilation.fileDependencies;\n        compilation.compiler._lastCompilationContextDependencies = compilation.contextDependencies;\n      });\n    }\n  }\n\n  /* istanbul ignore next */\n  applyMtime(mtime) {\n    if (this.FS_ACCURACY > 1 && mtime % 2 !== 0) this.FS_ACCURACY = 1;else if (this.FS_ACCURACY > 10 && mtime % 20 !== 0) this.FS_ACCURACY = 10;else if (this.FS_ACCURACY > 100 && mtime % 200 !== 0) this.FS_ACCURACY = 100;else if (this.FS_ACCURACY > 1000 && mtime % 2000 !== 0) this.FS_ACCURACY = 1000;\n  }\n}\nmodule.exports = CachePlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
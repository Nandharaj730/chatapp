{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Joel Denning @joeldenning\n */\n\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\nconst Template = require(\"./Template\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} SystemMainTemplatePluginOptions\n * @param {string=} name the library name\n */\n\nclass SystemMainTemplatePlugin {\n  /**\n   * @param {SystemMainTemplatePluginOptions} options the plugin options\n   */\n  constructor(options) {\n    this.name = options.name;\n  }\n\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n  apply(compilation) {\n    const mainTemplate = compilation.mainTemplate,\n      chunkTemplate = compilation.chunkTemplate;\n    const onRenderWithEntry = (source, chunk, hash) => {\n      const externals = chunk.getModules().filter(m => m.external);\n\n      // The name this bundle should be registered as with System\n      const name = this.name ? `${JSON.stringify(mainTemplate.getAssetPath(this.name, {\n        hash,\n        chunk\n      }))}, ` : \"\";\n\n      // The array of dependencies that are external to webpack and will be provided by System\n      const systemDependencies = JSON.stringify(externals.map(m => typeof m.request === \"object\" ? m.request.amd : m.request));\n\n      // The name of the variable provided by System for exporting\n      const dynamicExport = \"__WEBPACK_DYNAMIC_EXPORT__\";\n\n      // An array of the internal variable names for the webpack externals\n      const externalWebpackNames = externals.map(m => `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${m.id}`)}__`);\n\n      // Declaring variables for the internal variable names for the webpack externals\n      const externalVarDeclarations = externalWebpackNames.length > 0 ? `var ${externalWebpackNames.join(\", \")};` : \"\";\n\n      // The system.register format requires an array of setter functions for externals.\n      const setters = externalWebpackNames.length === 0 ? \"\" : Template.asString([\"setters: [\", Template.indent(externalWebpackNames.map(external => Template.asString([\"function(module) {\", Template.indent(`${external} = module;`), \"}\"])).join(\",\\n\")), \"],\"]);\n      return new ConcatSource(Template.asString([`System.register(${name}${systemDependencies}, function(${dynamicExport}) {`, Template.indent([externalVarDeclarations, \"return {\", Template.indent([setters, \"execute: function() {\", Template.indent(`${dynamicExport}(`)])])]) + \"\\n\", source, \"\\n\" + Template.asString([Template.indent([Template.indent([Template.indent([\");\"]), \"}\"]), \"};\"]), \"})\"]));\n    };\n    for (const template of [mainTemplate, chunkTemplate]) {\n      template.hooks.renderWithEntry.tap(\"SystemMainTemplatePlugin\", onRenderWithEntry);\n    }\n    mainTemplate.hooks.globalHashPaths.tap(\"SystemMainTemplatePlugin\", paths => {\n      if (this.name) {\n        paths.push(this.name);\n      }\n      return paths;\n    });\n    mainTemplate.hooks.hash.tap(\"SystemMainTemplatePlugin\", hash => {\n      hash.update(\"exports system\");\n      if (this.name) {\n        hash.update(this.name);\n      }\n    });\n  }\n}\nmodule.exports = SystemMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
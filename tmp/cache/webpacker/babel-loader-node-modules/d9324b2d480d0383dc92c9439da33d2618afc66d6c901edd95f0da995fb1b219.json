{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst truncateArgs = require(\"../logging/truncateArgs\");\nconst util = require(\"util\");\nconst tty = process.stderr.isTTY && process.env.TERM !== \"dumb\";\nlet currentStatusMessage = undefined;\nlet hasStatusMessage = false;\nlet currentIndent = \"\";\nlet currentCollapsed = 0;\nconst indent = (str, prefix, colorPrefix, colorSuffix) => {\n  if (str === \"\") return str;\n  prefix = currentIndent + prefix;\n  if (tty) {\n    return prefix + colorPrefix + str.replace(/\\n/g, colorSuffix + \"\\n\" + prefix + colorPrefix) + colorSuffix;\n  } else {\n    return prefix + str.replace(/\\n/g, \"\\n\" + prefix);\n  }\n};\nconst clearStatusMessage = () => {\n  if (hasStatusMessage) {\n    process.stderr.write(\"\\x1b[2K\\r\");\n    hasStatusMessage = false;\n  }\n};\nconst writeStatusMessage = () => {\n  if (!currentStatusMessage) return;\n  const l = process.stderr.columns;\n  const args = l ? truncateArgs(currentStatusMessage, l - 1) : currentStatusMessage;\n  const str = args.join(\" \");\n  const coloredStr = `\\u001b[1m${str}\\u001b[39m\\u001b[22m`;\n  process.stderr.write(`\\x1b[2K\\r${coloredStr}`);\n  hasStatusMessage = true;\n};\nconst writeColored = (prefix, colorPrefix, colorSuffix) => {\n  return function () {\n    if (currentCollapsed > 0) return;\n    clearStatusMessage();\n    // @ts-ignore\n    const str = indent(util.format(...arguments), prefix, colorPrefix, colorSuffix);\n    process.stderr.write(str + \"\\n\");\n    writeStatusMessage();\n  };\n};\nconst writeGroupMessage = writeColored(\"<-> \", \"\\u001b[1m\\u001b[36m\", \"\\u001b[39m\\u001b[22m\");\nconst writeGroupCollapsedMessage = writeColored(\"<+> \", \"\\u001b[1m\\u001b[36m\", \"\\u001b[39m\\u001b[22m\");\nmodule.exports = {\n  log: writeColored(\"    \", \"\\u001b[1m\", \"\\u001b[22m\"),\n  debug: writeColored(\"    \", \"\", \"\"),\n  trace: writeColored(\"    \", \"\", \"\"),\n  info: writeColored(\"<i> \", \"\\u001b[1m\\u001b[32m\", \"\\u001b[39m\\u001b[22m\"),\n  warn: writeColored(\"<w> \", \"\\u001b[1m\\u001b[33m\", \"\\u001b[39m\\u001b[22m\"),\n  error: writeColored(\"<e> \", \"\\u001b[1m\\u001b[31m\", \"\\u001b[39m\\u001b[22m\"),\n  logTime: writeColored(\"<t> \", \"\\u001b[1m\\u001b[35m\", \"\\u001b[39m\\u001b[22m\"),\n  group: function () {\n    writeGroupMessage(...arguments);\n    if (currentCollapsed > 0) {\n      currentCollapsed++;\n    } else {\n      currentIndent += \"  \";\n    }\n  },\n  groupCollapsed: function () {\n    writeGroupCollapsedMessage(...arguments);\n    currentCollapsed++;\n  },\n  groupEnd: () => {\n    if (currentCollapsed > 0) currentCollapsed--;else if (currentIndent.length >= 2) currentIndent = currentIndent.slice(0, currentIndent.length - 2);\n  },\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  profile: console.profile && (name => console.profile(name)),\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  profileEnd: console.profileEnd && (name => console.profileEnd(name)),\n  clear: tty &&\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  console.clear && (() => {\n    clearStatusMessage();\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    console.clear();\n    writeStatusMessage();\n  }),\n  status: tty ? function (name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    args = args.filter(Boolean);\n    if (name === undefined && args.length === 0) {\n      clearStatusMessage();\n      currentStatusMessage = undefined;\n    } else if (typeof name === \"string\" && name.startsWith(\"[webpack.Progress] \")) {\n      currentStatusMessage = [name.slice(19), ...args];\n      writeStatusMessage();\n    } else if (name === \"[webpack.Progress]\") {\n      currentStatusMessage = [...args];\n      writeStatusMessage();\n    } else {\n      currentStatusMessage = [name, ...args];\n      writeStatusMessage();\n    }\n  } : writeColored(\"<s> \", \"\", \"\")\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
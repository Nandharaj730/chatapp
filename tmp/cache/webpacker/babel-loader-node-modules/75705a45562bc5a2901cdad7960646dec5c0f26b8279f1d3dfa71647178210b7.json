{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\nclass SyncWaterfallHookCodeFactory extends HookCodeFactory {\n  content(_ref) {\n    let onError = _ref.onError,\n      onResult = _ref.onResult,\n      resultReturns = _ref.resultReturns,\n      rethrowIfPossible = _ref.rethrowIfPossible;\n    return this.callTapsSeries({\n      onError: (i, err) => onError(err),\n      onResult: (i, result, next) => {\n        let code = \"\";\n        code += `if(${result} !== undefined) {\\n`;\n        code += `${this._args[0]} = ${result};\\n`;\n        code += `}\\n`;\n        code += next();\n        return code;\n      },\n      onDone: () => onResult(this._args[0]),\n      doneReturns: resultReturns,\n      rethrowIfPossible\n    });\n  }\n}\nconst factory = new SyncWaterfallHookCodeFactory();\nclass SyncWaterfallHook extends Hook {\n  constructor(args) {\n    super(args);\n    if (args.length < 1) throw new Error(\"Waterfall hooks must have at least one argument\");\n  }\n  tapAsync() {\n    throw new Error(\"tapAsync is not supported on a SyncWaterfallHook\");\n  }\n  tapPromise() {\n    throw new Error(\"tapPromise is not supported on a SyncWaterfallHook\");\n  }\n  compile(options) {\n    factory.setup(this, options);\n    return factory.create(options);\n  }\n}\nmodule.exports = SyncWaterfallHook;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nconst getInnerRequest = require(\"./getInnerRequest\");\nmodule.exports = class AliasFieldPlugin {\n  constructor(source, field, target) {\n    this.source = source;\n    this.field = field;\n    this.target = target;\n  }\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"AliasFieldPlugin\", (request, resolveContext, callback) => {\n      if (!request.descriptionFileData) return callback();\n      const innerRequest = getInnerRequest(resolver, request);\n      if (!innerRequest) return callback();\n      const fieldData = DescriptionFileUtils.getField(request.descriptionFileData, this.field);\n      if (typeof fieldData !== \"object\") {\n        if (resolveContext.log) resolveContext.log(\"Field '\" + this.field + \"' doesn't contain a valid alias configuration\");\n        return callback();\n      }\n      const data1 = fieldData[innerRequest];\n      const data2 = fieldData[innerRequest.replace(/^\\.\\//, \"\")];\n      const data = typeof data1 !== \"undefined\" ? data1 : data2;\n      if (data === innerRequest) return callback();\n      if (data === undefined) return callback();\n      if (data === false) {\n        const ignoreObj = Object.assign({}, request, {\n          path: false\n        });\n        return callback(null, ignoreObj);\n      }\n      const obj = Object.assign({}, request, {\n        path: request.descriptionFileRoot,\n        request: data\n      });\n      resolver.doResolve(target, obj, \"aliased from description file \" + request.descriptionFilePath + \" with mapping '\" + innerRequest + \"' to '\" + data + \"'\", resolveContext, (err, result) => {\n        if (err) return callback(err);\n\n        // Don't allow other aliasing or raw request\n        if (result === undefined) return callback(null, null);\n        callback(null, result);\n      });\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
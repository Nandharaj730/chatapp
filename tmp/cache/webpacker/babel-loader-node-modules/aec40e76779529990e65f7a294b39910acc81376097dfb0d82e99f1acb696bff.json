{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction startsWith(string, searchString) {\n  const stringLength = string.length;\n  const searchLength = searchString.length;\n\n  // early out if the search length is greater than the search string\n  if (searchLength > stringLength) {\n    return false;\n  }\n  let index = -1;\n  while (++index < searchLength) {\n    if (string.charCodeAt(index) !== searchString.charCodeAt(index)) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = class AliasPlugin {\n  constructor(source, options, target) {\n    this.source = source;\n    this.options = Array.isArray(options) ? options : [options];\n    this.target = target;\n  }\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"AliasPlugin\", (request, resolveContext, callback) => {\n      const innerRequest = request.request || request.path;\n      if (!innerRequest) return callback();\n      for (const item of this.options) {\n        if (innerRequest === item.name || !item.onlyModule && startsWith(innerRequest, item.name + \"/\")) {\n          if (innerRequest !== item.alias && !startsWith(innerRequest, item.alias + \"/\")) {\n            const newRequestStr = item.alias + innerRequest.substr(item.name.length);\n            const obj = Object.assign({}, request, {\n              request: newRequestStr\n            });\n            return resolver.doResolve(target, obj, \"aliased with mapping '\" + item.name + \"': '\" + item.alias + \"' to '\" + newRequestStr + \"'\", resolveContext, (err, result) => {\n              if (err) return callback(err);\n\n              // Don't allow other aliasing or raw request\n              if (result === undefined) return callback(null, null);\n              callback(null, result);\n            });\n          }\n        }\n      }\n      return callback();\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
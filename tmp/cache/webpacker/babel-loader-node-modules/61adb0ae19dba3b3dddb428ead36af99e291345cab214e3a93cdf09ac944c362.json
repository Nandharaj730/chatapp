{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyReference = require(\"./DependencyReference\");\nconst ModuleDependency = require(\"./ModuleDependency\");\nconst Template = require(\"../Template\");\nclass HarmonyImportDependency extends ModuleDependency {\n  constructor(request, originModule, sourceOrder, parserScope) {\n    super(request);\n    this.redirectedModule = undefined;\n    this.originModule = originModule;\n    this.sourceOrder = sourceOrder;\n    this.parserScope = parserScope;\n  }\n  get _module() {\n    return this.redirectedModule || this.module;\n  }\n  getReference() {\n    if (!this._module) return null;\n    return new DependencyReference(this._module, false, this.weak, this.sourceOrder);\n  }\n  getImportVar() {\n    let importVarMap = this.parserScope.importVarMap;\n    if (!importVarMap) this.parserScope.importVarMap = importVarMap = new Map();\n    let importVar = importVarMap.get(this._module);\n    if (importVar) return importVar;\n    importVar = `${Template.toIdentifier(`${this.userRequest}`)}__WEBPACK_IMPORTED_MODULE_${importVarMap.size}__`;\n    importVarMap.set(this._module, importVar);\n    return importVar;\n  }\n  getImportStatement(update, runtime) {\n    return runtime.importStatement({\n      update,\n      module: this._module,\n      importVar: this.getImportVar(),\n      request: this.request,\n      originModule: this.originModule\n    });\n  }\n  updateHash(hash) {\n    super.updateHash(hash);\n    const importedModule = this._module;\n    hash.update((importedModule && (!importedModule.buildMeta || importedModule.buildMeta.exportsType)) + \"\");\n    hash.update((importedModule && importedModule.id) + \"\");\n  }\n  disconnect() {\n    super.disconnect();\n    this.redirectedModule = undefined;\n  }\n}\nmodule.exports = HarmonyImportDependency;\nconst importEmittedMap = new WeakMap();\nHarmonyImportDependency.Template = class HarmonyImportDependencyTemplate {\n  apply(dep, source, runtime) {\n    // no-op\n  }\n  getHarmonyInitOrder(dep) {\n    return dep.sourceOrder;\n  }\n  static isImportEmitted(dep, source) {\n    let sourceInfo = importEmittedMap.get(source);\n    if (!sourceInfo) return false;\n    const key = dep._module || dep.request;\n    return key && sourceInfo.emittedImports.get(key);\n  }\n  harmonyInit(dep, source, runtime, dependencyTemplates) {\n    let sourceInfo = importEmittedMap.get(source);\n    if (!sourceInfo) {\n      importEmittedMap.set(source, sourceInfo = {\n        emittedImports: new Map()\n      });\n    }\n    const key = dep._module || dep.request;\n    if (key && sourceInfo.emittedImports.get(key)) return;\n    sourceInfo.emittedImports.set(key, true);\n    const content = dep.getImportStatement(false, runtime);\n    source.insert(-1, content);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
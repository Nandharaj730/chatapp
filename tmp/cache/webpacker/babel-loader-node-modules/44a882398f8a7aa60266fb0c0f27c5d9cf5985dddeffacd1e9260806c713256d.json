{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst CommonJsRequireDependency = require(\"./CommonJsRequireDependency\");\nconst CommonJsRequireContextDependency = require(\"./CommonJsRequireContextDependency\");\nconst RequireHeaderDependency = require(\"./RequireHeaderDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\nconst LocalModulesHelpers = require(\"./LocalModulesHelpers\");\nconst ParserHelpers = require(\"../ParserHelpers\");\nclass CommonJsRequireDependencyParserPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(parser) {\n    const options = this.options;\n    const processItem = (expr, param) => {\n      if (param.isString()) {\n        const dep = new CommonJsRequireDependency(param.string, param.range);\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      }\n    };\n    const processContext = (expr, param) => {\n      const dep = ContextDependencyHelpers.create(CommonJsRequireContextDependency, expr.range, param, expr, options, {}, parser);\n      if (!dep) return;\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    };\n    parser.hooks.expression.for(\"require.cache\").tap(\"CommonJsRequireDependencyParserPlugin\", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, \"__webpack_require__.c\"));\n    parser.hooks.expression.for(\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", expr => {\n      const dep = new CommonJsRequireContextDependency({\n        request: options.unknownContextRequest,\n        recursive: options.unknownContextRecursive,\n        regExp: options.unknownContextRegExp,\n        mode: \"sync\"\n      }, expr.range);\n      dep.critical = options.unknownContextCritical && \"require function is used in a way in which dependencies cannot be statically extracted\";\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    });\n    const createHandler = callNew => expr => {\n      if (expr.arguments.length !== 1) return;\n      let localModule;\n      const param = parser.evaluateExpression(expr.arguments[0]);\n      if (param.isConditional()) {\n        let isExpression = false;\n        const prevLength = parser.state.current.dependencies.length;\n        const dep = new RequireHeaderDependency(expr.callee.range);\n        dep.loc = expr.loc;\n        parser.state.current.addDependency(dep);\n        for (const p of param.options) {\n          const result = processItem(expr, p);\n          if (result === undefined) {\n            isExpression = true;\n          }\n        }\n        if (isExpression) {\n          parser.state.current.dependencies.length = prevLength;\n        } else {\n          return true;\n        }\n      }\n      if (param.isString() && (localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string))) {\n        const dep = new LocalModuleDependency(localModule, expr.range, callNew);\n        dep.loc = expr.loc;\n        parser.state.current.addDependency(dep);\n        return true;\n      } else {\n        const result = processItem(expr, param);\n        if (result === undefined) {\n          processContext(expr, param);\n        } else {\n          const dep = new RequireHeaderDependency(expr.callee.range);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n        }\n        return true;\n      }\n    };\n    parser.hooks.call.for(\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(false));\n    parser.hooks.new.for(\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(true));\n    parser.hooks.call.for(\"module.require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(false));\n    parser.hooks.new.for(\"module.require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(true));\n  }\n}\nmodule.exports = CommonJsRequireDependencyParserPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
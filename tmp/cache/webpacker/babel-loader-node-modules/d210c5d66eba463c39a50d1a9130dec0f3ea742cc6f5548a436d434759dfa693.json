{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst ParserHelpers = require(\"./ParserHelpers\");\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst NullFactory = require(\"./NullFactory\");\nclass NodeStuffPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"NodeStuffPlugin\", (compilation, _ref) => {\n      let normalModuleFactory = _ref.normalModuleFactory;\n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.node === false) return;\n        let localOptions = options;\n        if (parserOptions.node) {\n          localOptions = Object.assign({}, localOptions, parserOptions.node);\n        }\n        const setConstant = (expressionName, value) => {\n          parser.hooks.expression.for(expressionName).tap(\"NodeStuffPlugin\", () => {\n            parser.state.current.addVariable(expressionName, JSON.stringify(value));\n            return true;\n          });\n        };\n        const setModuleConstant = (expressionName, fn) => {\n          parser.hooks.expression.for(expressionName).tap(\"NodeStuffPlugin\", () => {\n            parser.state.current.addVariable(expressionName, JSON.stringify(fn(parser.state.module)));\n            return true;\n          });\n        };\n        const context = compiler.context;\n        if (localOptions.__filename) {\n          if (localOptions.__filename === \"mock\") {\n            setConstant(\"__filename\", \"/index.js\");\n          } else {\n            setModuleConstant(\"__filename\", module => path.relative(context, module.resource));\n          }\n          parser.hooks.evaluateIdentifier.for(\"__filename\").tap(\"NodeStuffPlugin\", expr => {\n            if (!parser.state.module) return;\n            const resource = parser.state.module.resource;\n            const i = resource.indexOf(\"?\");\n            return ParserHelpers.evaluateToString(i < 0 ? resource : resource.substr(0, i))(expr);\n          });\n        }\n        if (localOptions.__dirname) {\n          if (localOptions.__dirname === \"mock\") {\n            setConstant(\"__dirname\", \"/\");\n          } else {\n            setModuleConstant(\"__dirname\", module => path.relative(context, module.context));\n          }\n          parser.hooks.evaluateIdentifier.for(\"__dirname\").tap(\"NodeStuffPlugin\", expr => {\n            if (!parser.state.module) return;\n            return ParserHelpers.evaluateToString(parser.state.module.context)(expr);\n          });\n        }\n        parser.hooks.expression.for(\"require.extensions\").tap(\"NodeStuffPlugin\", ParserHelpers.expressionIsUnsupported(parser, \"require.extensions is not supported by webpack. Use a loader instead.\"));\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"NodeStuffPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"NodeStuffPlugin\", handler);\n    });\n  }\n}\nmodule.exports = NodeStuffPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
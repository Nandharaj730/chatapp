{"ast":null,"code":"'use strict';\n\nconst pTry = require('p-try');\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));\n  }\n  const queue = [];\n  let activeCount = 0;\n  const next = () => {\n    activeCount--;\n    if (queue.length > 0) {\n      queue.shift()();\n    }\n  };\n  const run = function (fn, resolve) {\n    activeCount++;\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    const result = pTry(fn, ...args);\n    resolve(result);\n    result.then(next, next);\n  };\n  const enqueue = function (fn, resolve) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    if (activeCount < concurrency) {\n      run(fn, resolve, ...args);\n    } else {\n      queue.push(run.bind(null, fn, resolve, ...args));\n    }\n  };\n  const generator = function (fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    return new Promise(resolve => enqueue(fn, resolve, ...args));\n  };\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.length\n    },\n    clearQueue: {\n      value: () => {\n        queue.length = 0;\n      }\n    }\n  });\n  return generator;\n};\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst TypeUnknown = 0;\nconst TypeNull = 1;\nconst TypeString = 2;\nconst TypeNumber = 3;\nconst TypeBoolean = 4;\nconst TypeRegExp = 5;\nconst TypeConditional = 6;\nconst TypeArray = 7;\nconst TypeConstArray = 8;\nconst TypeIdentifier = 9;\nconst TypeWrapped = 10;\nconst TypeTemplateString = 11;\nclass BasicEvaluatedExpression {\n  constructor() {\n    this.type = TypeUnknown;\n    this.range = null;\n    this.falsy = false;\n    this.truthy = false;\n    this.bool = null;\n    this.number = null;\n    this.regExp = null;\n    this.string = null;\n    this.quasis = null;\n    this.parts = null;\n    this.array = null;\n    this.items = null;\n    this.options = null;\n    this.prefix = null;\n    this.postfix = null;\n    this.wrappedInnerExpressions = null;\n    this.expression = null;\n  }\n  isNull() {\n    return this.type === TypeNull;\n  }\n  isString() {\n    return this.type === TypeString;\n  }\n  isNumber() {\n    return this.type === TypeNumber;\n  }\n  isBoolean() {\n    return this.type === TypeBoolean;\n  }\n  isRegExp() {\n    return this.type === TypeRegExp;\n  }\n  isConditional() {\n    return this.type === TypeConditional;\n  }\n  isArray() {\n    return this.type === TypeArray;\n  }\n  isConstArray() {\n    return this.type === TypeConstArray;\n  }\n  isIdentifier() {\n    return this.type === TypeIdentifier;\n  }\n  isWrapped() {\n    return this.type === TypeWrapped;\n  }\n  isTemplateString() {\n    return this.type === TypeTemplateString;\n  }\n  isTruthy() {\n    return this.truthy;\n  }\n  isFalsy() {\n    return this.falsy;\n  }\n  asBool() {\n    if (this.truthy) return true;\n    if (this.falsy) return false;\n    if (this.isBoolean()) return this.bool;\n    if (this.isNull()) return false;\n    if (this.isString()) return this.string !== \"\";\n    if (this.isNumber()) return this.number !== 0;\n    if (this.isRegExp()) return true;\n    if (this.isArray()) return true;\n    if (this.isConstArray()) return true;\n    if (this.isWrapped()) {\n      return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;\n    }\n    if (this.isTemplateString()) {\n      const str = this.asString();\n      if (typeof str === \"string\") return str !== \"\";\n    }\n    return undefined;\n  }\n  asString() {\n    if (this.isBoolean()) return `${this.bool}`;\n    if (this.isNull()) return \"null\";\n    if (this.isString()) return this.string;\n    if (this.isNumber()) return `${this.number}`;\n    if (this.isRegExp()) return `${this.regExp}`;\n    if (this.isArray()) {\n      let array = [];\n      for (const item of this.items) {\n        const itemStr = item.asString();\n        if (itemStr === undefined) return undefined;\n        array.push(itemStr);\n      }\n      return `${array}`;\n    }\n    if (this.isConstArray()) return `${this.array}`;\n    if (this.isTemplateString()) {\n      let str = \"\";\n      for (const part of this.parts) {\n        const partStr = part.asString();\n        if (partStr === undefined) return undefined;\n        str += partStr;\n      }\n      return str;\n    }\n    return undefined;\n  }\n  setString(string) {\n    this.type = TypeString;\n    this.string = string;\n    return this;\n  }\n  setNull() {\n    this.type = TypeNull;\n    return this;\n  }\n  setNumber(number) {\n    this.type = TypeNumber;\n    this.number = number;\n    return this;\n  }\n  setBoolean(bool) {\n    this.type = TypeBoolean;\n    this.bool = bool;\n    return this;\n  }\n  setRegExp(regExp) {\n    this.type = TypeRegExp;\n    this.regExp = regExp;\n    return this;\n  }\n  setIdentifier(identifier) {\n    this.type = TypeIdentifier;\n    this.identifier = identifier;\n    return this;\n  }\n  setWrapped(prefix, postfix, innerExpressions) {\n    this.type = TypeWrapped;\n    this.prefix = prefix;\n    this.postfix = postfix;\n    this.wrappedInnerExpressions = innerExpressions;\n    return this;\n  }\n  setOptions(options) {\n    this.type = TypeConditional;\n    this.options = options;\n    return this;\n  }\n  addOptions(options) {\n    if (!this.options) {\n      this.type = TypeConditional;\n      this.options = [];\n    }\n    for (const item of options) {\n      this.options.push(item);\n    }\n    return this;\n  }\n  setItems(items) {\n    this.type = TypeArray;\n    this.items = items;\n    return this;\n  }\n  setArray(array) {\n    this.type = TypeConstArray;\n    this.array = array;\n    return this;\n  }\n  setTemplateString(quasis, parts, kind) {\n    this.type = TypeTemplateString;\n    this.quasis = quasis;\n    this.parts = parts;\n    this.templateStringKind = kind;\n    return this;\n  }\n  setTruthy() {\n    this.falsy = false;\n    this.truthy = true;\n    return this;\n  }\n  setFalsy() {\n    this.falsy = true;\n    this.truthy = false;\n    return this;\n  }\n  setRange(range) {\n    this.range = range;\n    return this;\n  }\n  setExpression(expression) {\n    this.expression = expression;\n    return this;\n  }\n}\nmodule.exports = BasicEvaluatedExpression;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
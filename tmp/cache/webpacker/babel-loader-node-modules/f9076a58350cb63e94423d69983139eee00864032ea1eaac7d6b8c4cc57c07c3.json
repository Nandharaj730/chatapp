{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst sortByIndex = (a, b) => {\n  return a.index - b.index;\n};\nconst sortByIndex2 = (a, b) => {\n  return a.index2 - b.index2;\n};\nclass ChunkModuleIdRangePlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"ChunkModuleIdRangePlugin\", compilation => {\n      compilation.hooks.moduleIds.tap(\"ChunkModuleIdRangePlugin\", modules => {\n        const chunk = compilation.chunks.find(chunk => chunk.name === options.name);\n        if (!chunk) {\n          throw new Error(`ChunkModuleIdRangePlugin: Chunk with name '${options.name}\"' was not found`);\n        }\n        let chunkModules;\n        if (options.order) {\n          chunkModules = Array.from(chunk.modulesIterable);\n          switch (options.order) {\n            case \"index\":\n              chunkModules.sort(sortByIndex);\n              break;\n            case \"index2\":\n              chunkModules.sort(sortByIndex2);\n              break;\n            default:\n              throw new Error(\"ChunkModuleIdRangePlugin: unexpected value of order\");\n          }\n        } else {\n          chunkModules = modules.filter(m => {\n            return m.chunksIterable.has(chunk);\n          });\n        }\n        let currentId = options.start || 0;\n        for (let i = 0; i < chunkModules.length; i++) {\n          const m = chunkModules[i];\n          if (m.id === null) {\n            m.id = currentId++;\n          }\n          if (options.end && currentId > options.end) break;\n        }\n      });\n    });\n  }\n}\nmodule.exports = ChunkModuleIdRangePlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
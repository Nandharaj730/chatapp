{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\nconst NormalModule = require(\"./NormalModule\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass AutomaticPrefetchPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler Webpack Compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"AutomaticPrefetchPlugin\", (compilation, _ref) => {\n      let normalModuleFactory = _ref.normalModuleFactory;\n      compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n    });\n    let lastModules = null;\n    compiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", compilation => {\n      lastModules = compilation.modules.filter(m => m instanceof NormalModule).map(( /** @type {NormalModule} */m) => ({\n        context: m.context,\n        request: m.request\n      }));\n    });\n    compiler.hooks.make.tapAsync(\"AutomaticPrefetchPlugin\", (compilation, callback) => {\n      if (!lastModules) return callback();\n      asyncLib.forEach(lastModules, (m, callback) => {\n        compilation.prefetch(m.context || compiler.context, new PrefetchDependency(m.request), callback);\n      }, callback);\n    });\n  }\n}\nmodule.exports = AutomaticPrefetchPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
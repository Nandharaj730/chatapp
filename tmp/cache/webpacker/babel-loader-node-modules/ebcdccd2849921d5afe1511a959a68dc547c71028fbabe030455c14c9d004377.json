{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n  OriginalSource = _require.OriginalSource,\n  RawSource = _require.RawSource;\nconst Module = require(\"./Module\");\nconst WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\nconst Template = require(\"./Template\");\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\nclass ExternalModule extends Module {\n  constructor(request, type, userRequest) {\n    super(\"javascript/dynamic\", null);\n\n    // Info from Factory\n    this.request = request;\n    this.externalType = type;\n    this.userRequest = userRequest;\n    this.external = true;\n  }\n  libIdent() {\n    return this.userRequest;\n  }\n  chunkCondition(chunk) {\n    return chunk.hasEntryModule();\n  }\n  identifier() {\n    return \"external \" + JSON.stringify(this.request);\n  }\n  readableIdentifier() {\n    return \"external \" + JSON.stringify(this.request);\n  }\n  needRebuild() {\n    return false;\n  }\n  build(options, compilation, resolver, fs, callback) {\n    this.built = true;\n    this.buildMeta = {};\n    this.buildInfo = {};\n    callback();\n  }\n  getSourceForGlobalVariableExternal(variableName, type) {\n    if (!Array.isArray(variableName)) {\n      // make it an array as the look up works the same basically\n      variableName = [variableName];\n    }\n\n    // needed for e.g. window[\"some\"][\"thing\"]\n    const objectLookup = variableName.map(r => `[${JSON.stringify(r)}]`).join(\"\");\n    return `(function() { module.exports = ${type}${objectLookup}; }());`;\n  }\n  getSourceForCommonJsExternal(moduleAndSpecifiers) {\n    if (!Array.isArray(moduleAndSpecifiers)) {\n      return `module.exports = require(${JSON.stringify(moduleAndSpecifiers)});`;\n    }\n    const moduleName = moduleAndSpecifiers[0];\n    const objectLookup = moduleAndSpecifiers.slice(1).map(r => `[${JSON.stringify(r)}]`).join(\"\");\n    return `module.exports = require(${JSON.stringify(moduleName)})${objectLookup};`;\n  }\n  checkExternalVariable(variableToCheck, request) {\n    return `if(typeof ${variableToCheck} === 'undefined') {${WebpackMissingModule.moduleCode(request)}}\\n`;\n  }\n  getSourceForAmdOrUmdExternal(id, optional, request) {\n    const externalVariable = `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${id}`)}__`;\n    const missingModuleError = optional ? this.checkExternalVariable(externalVariable, request) : \"\";\n    return `${missingModuleError}module.exports = ${externalVariable};`;\n  }\n  getSourceForDefaultCase(optional, request) {\n    if (!Array.isArray(request)) {\n      // make it an array as the look up works the same basically\n      request = [request];\n    }\n    const variableName = request[0];\n    const missingModuleError = optional ? this.checkExternalVariable(variableName, request.join(\".\")) : \"\";\n    const objectLookup = request.slice(1).map(r => `[${JSON.stringify(r)}]`).join(\"\");\n    return `${missingModuleError}module.exports = ${variableName}${objectLookup};`;\n  }\n  getSourceString(runtime) {\n    const request = typeof this.request === \"object\" && !Array.isArray(this.request) ? this.request[this.externalType] : this.request;\n    switch (this.externalType) {\n      case \"this\":\n      case \"window\":\n      case \"self\":\n        return this.getSourceForGlobalVariableExternal(request, this.externalType);\n      case \"global\":\n        return this.getSourceForGlobalVariableExternal(request, runtime.outputOptions.globalObject);\n      case \"commonjs\":\n      case \"commonjs2\":\n        return this.getSourceForCommonJsExternal(request);\n      case \"amd\":\n      case \"amd-require\":\n      case \"umd\":\n      case \"umd2\":\n      case \"system\":\n        return this.getSourceForAmdOrUmdExternal(this.id, this.optional, request);\n      default:\n        return this.getSourceForDefaultCase(this.optional, request);\n    }\n  }\n  getSource(sourceString) {\n    if (this.useSourceMap) {\n      return new OriginalSource(sourceString, this.identifier());\n    }\n    return new RawSource(sourceString);\n  }\n  source(dependencyTemplates, runtime) {\n    return this.getSource(this.getSourceString(runtime));\n  }\n  size() {\n    return 42;\n  }\n\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @returns {void}\n   */\n  updateHash(hash) {\n    hash.update(this.externalType);\n    hash.update(JSON.stringify(this.request));\n    hash.update(JSON.stringify(Boolean(this.optional)));\n    super.updateHash(hash);\n  }\n}\nmodule.exports = ExternalModule;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}